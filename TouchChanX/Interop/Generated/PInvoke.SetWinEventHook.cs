// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable CS1591,CS1573,CS0465,CS0649,CS8019,CS1570,CS1584,CS1658,CS0436,CS8981
using global::System;
using global::System.Diagnostics;
using global::System.Diagnostics.CodeAnalysis;
using global::System.Runtime.CompilerServices;
using global::System.Runtime.InteropServices;
using winmdroot = global::Windows.Win32;
namespace Windows.Win32
{

	/// <content>
	/// Contains extern methods from "USER32.dll".
	/// </content>
	internal static partial class PInvoke
	{
		/// <summary>Removes an event hook function created by a previous call to SetWinEventHook.</summary>
		/// <param name="hWinEventHook">
		/// <para>Type: <b>HWINEVENTHOOK</b> Handle to the event hook returned in the previous call to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwineventhook">SetWinEventHook</a>.</para>
		/// <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-unhookwinevent#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> If successful, returns <b>TRUE</b>; otherwise, returns <b>FALSE</b>. Three common errors cause this function to fail: </para>
		/// <para>This doc was truncated.</para>
		/// </returns>
		/// <remarks>
		/// <para>This function removes the event hook specified by <i>hWinEventHook</i> that prevents the corresponding callback function from receiving further event notifications. If the client's thread ends, the system automatically calls this function. Call this function from the same thread that installed the event hook. <b>UnhookWinEvent</b> fails if called from a thread different from the call that corresponds to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwineventhook">SetWinEventHook</a>. If WINEVENT_INCONTEXT was specified when this event hook was installed, the system attempts to unload the corresponding DLL from all processes that loaded it. Although unloading does not occur immediately, the hook function is not called after <b>UnhookWinEvent</b> returns. For more information on WINEVENT_INCONTEXT, see <a href="https://docs.microsoft.com/windows/desktop/WinAuto/in-context-hook-functions">In-Context Hook Functions</a>.</para>
		/// <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-unhookwinevent#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true),DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern winmdroot.Foundation.BOOL UnhookWinEvent(winmdroot.UI.Accessibility.HWINEVENTHOOK hWinEventHook);

		/// <inheritdoc cref="SetWinEventHook(uint, uint, winmdroot.Foundation.HMODULE, winmdroot.UI.Accessibility.WINEVENTPROC, uint, uint, uint)"/>
		[OverloadResolutionPriority(1)]
		internal static unsafe UnhookWinEventSafeHandle SetWinEventHook(uint eventMin, uint eventMax, SafeHandle hmodWinEventProc, winmdroot.UI.Accessibility.WINEVENTPROC pfnWinEventProc, uint idProcess, uint idThread, uint dwFlags)
		{
			bool hmodWinEventProcAddRef = false;
			try
			{
				winmdroot.Foundation.HMODULE hmodWinEventProcLocal;
				if (hmodWinEventProc is object)
				{
					hmodWinEventProc.DangerousAddRef(ref hmodWinEventProcAddRef);
					hmodWinEventProcLocal = (winmdroot.Foundation.HMODULE)hmodWinEventProc.DangerousGetHandle();
				}
				else
					hmodWinEventProcLocal = (winmdroot.Foundation.HMODULE )new IntPtr(0L);
				winmdroot.UI.Accessibility.HWINEVENTHOOK __result = PInvoke.SetWinEventHook(eventMin, eventMax, hmodWinEventProcLocal, pfnWinEventProc, idProcess, idThread, dwFlags);
				return new UnhookWinEventSafeHandle(__result, ownsHandle: true);
			}
			finally
			{
				if (hmodWinEventProcAddRef)
					hmodWinEventProc.DangerousRelease();
			}
		}

		/// <summary>Sets an event hook function for a range of events.</summary>
		/// <param name="eventMin">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Specifies the <a href="https://docs.microsoft.com/windows/desktop/WinAuto/event-constants">event constant</a> for the lowest event value in the range of events that are handled by the hook function. This parameter can be set to <b>EVENT_MIN</b> to indicate the lowest possible event value.</para>
		/// <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="eventMax">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Specifies the event constant for the highest event value in the range of events that are handled by the hook function. This parameter can be  set to <a href="https://docs.microsoft.com/windows/desktop/WinAuto/event-constants">EVENT_MAX</a> to indicate the highest possible event value.</para>
		/// <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="hmodWinEventProc">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HMODULE</a></b> Handle to the DLL that contains the hook function at <i>lpfnWinEventProc</i>, if the WINEVENT_INCONTEXT flag is specified in the <i>dwFlags</i> parameter. If the hook function is not located in a DLL, or if the WINEVENT_OUTOFCONTEXT flag is specified, this parameter is <b>NULL</b>.</para>
		/// <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="pfnWinEventProc">
		/// <para>Type: <b>WINEVENTPROC</b> Pointer to the event hook function. For more information about this function, see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-wineventproc">WinEventProc</a>.</para>
		/// <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="idProcess">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">DWORD</a></b> Specifies the ID of the process from which the hook function receives events. Specify zero (0) to receive events from all processes on the current desktop.</para>
		/// <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="idThread">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">DWORD</a></b> Specifies the ID of the thread from which the hook function receives events. If this parameter is zero, the hook function is associated with all existing threads on the current desktop.</para>
		/// <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <param name="dwFlags">
		/// <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
		/// <para>Flag values that specify the location of the hook function and of the events to be skipped. The following flags are valid:</para>
		/// <para></para>
		/// <para>This doc was truncated.</para>
		/// <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwineventhook#parameters">Read more on docs.microsoft.com</see>.</para>
		/// </param>
		/// <returns>
		/// <para>Type: <b>HWINEVENTHOOK</b> If successful, returns an <a href="https://docs.microsoft.com/windows/desktop/WinAuto/hwineventhook">HWINEVENTHOOK</a> value that identifies this event hook instance. Applications save this return value to use it with the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-unhookwinevent">UnhookWinEvent</a> function. If unsuccessful, returns zero.</para>
		/// </returns>
		/// <remarks>
		/// <para>This function allows clients to specify which processes and threads they are interested in. If the <i>idProcess</i> parameter is nonzero and <i>idThread</i> is zero, the hook function receives the specified events from all threads in that process. If the <i>idProcess</i> parameter is zero and <i>idThread</i> is nonzero, the hook function receives the specified events only from the thread specified by <i>idThread</i>. If both are zero, the hook function receives the specified events from all threads and processes. Clients can call <b>SetWinEventHook</b> multiple times if they want to register additional hook functions or listen for additional events. The client thread that calls <b>SetWinEventHook</b> must have a message loop in order to receive events. When you use <b>SetWinEventHook</b> to set a callback in managed code, you should use the <a href="https://docs.microsoft.com/dotnet/api/system.runtime.interopservices.gchandle">GCHandle</a> structure to avoid exceptions. This tells the garbage collector not to move the callback. For out-of-context events, the event is delivered on the same thread that called <b>SetWinEventHook</b>. In some situations, even if you request WINEVENT_INCONTEXT events, the events will still be delivered out-of-context. These scenarios include events from console windows and events from processes that have a different bit-depth (64 bit versus 32 bits) than the caller.</para>
		/// <para>While a hook function processes an event, additional events may be triggered, which may cause the hook function to reenter before the processing for the original event is finished. The problem with reentrancy in hook functions is that events are completed out of sequence unless the hook function handles this situation. For more information, see <a href="https://docs.microsoft.com/windows/desktop/WinAuto/guarding-against-reentrancy-in-hook-functions">Guarding Against Reentrancy</a>. <b>Windows Store app development</b> If dwFlags is WINEVENT_INCONTEXT AND (idProcess = 0 | idThread = 0), then window hook DLLs are not loaded in-process for the Windows Store app processes and the Windows Runtime broker process unless they are installed by UIAccess processes (accessibility tools). The notification is delivered on the installer's thread. This behavior is similar to what happens when there is an architecture mismatch between the hook DLL and the target application process, for example, when the hook DLL is 32-bit and the application process 64-bit.</para>
		/// <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwineventhook#">Read more on docs.microsoft.com</see>.</para>
		/// </remarks>
		[DllImport("USER32.dll", ExactSpelling = true),DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
		internal static extern winmdroot.UI.Accessibility.HWINEVENTHOOK SetWinEventHook(uint eventMin, uint eventMax, winmdroot.Foundation.HMODULE hmodWinEventProc, [MarshalAs(UnmanagedType.FunctionPtr)] winmdroot.UI.Accessibility.WINEVENTPROC pfnWinEventProc, uint idProcess, uint idThread, uint dwFlags);
	}
}
